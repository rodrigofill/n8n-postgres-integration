{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n    c.id AS client_id,\n    c.nome AS client_name,\n    AVG(er.reading_value) AS avg_reading\nFROM\n    public.clients c\nJOIN\n    public.contracts ct ON ct.client_id = c.id\nJOIN\n    public.energy_readings er ON er.contract_id = ct.id\nWHERE\n    ct.active = true\n    AND er.reading_date >= CURRENT_DATE - INTERVAL '3 months'\nGROUP BY\n    c.id, c.nome;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -540,
        540
      ],
      "id": "37620052-d7cb-4f69-a2d1-039e17d4428e",
      "name": "Execute a SQL query",
      "credentials": {
        "postgres": {
          "id": "KPDQxduSSrlKy5C3",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "path": "get-results",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -780,
        540
      ],
      "id": "a6e6df71-8c29-4caf-bce9-73cb8459f5ba",
      "name": "Webhook",
      "webhookId": "fdec70e5-3899-4a7e-992a-3752283f11a1"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import math\n\n# Input data comes from the previous node as items\nclients_with_avg = [item[\"json\"] for item in items]\n\nreadings = [c[\"avg_reading\"] for c in clients_with_avg]\nmean = sum(readings) / len(readings)\nstddev = math.sqrt(sum((x - mean) ** 2 for x in readings) / len(readings))\n\nthreshold = 2  # z-score threshold\n\nresults = []\nfor client in clients_with_avg:\n    z_score = (client[\"avg_reading\"] - mean) / stddev if stddev != 0 else 0\n    is_outlier = abs(z_score) > threshold\n    results.append({\n        \"json\": {\n            \"client_id\": client[\"client_id\"],\n            \"client_name\": client[\"client_name\"],\n            \"avg_reading\": client[\"avg_reading\"],\n            \"z_score\": round(z_score, 2),\n            \"is_outlier\": is_outlier,\n        }\n    })\n\nreturn results\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        540
      ],
      "id": "f5f5b083-657f-4d8d-9b2b-40174462338b",
      "name": "Code"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        460,
        540
      ],
      "id": "c0f3c580-41df-45ef-8af9-bd6ddf302808",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Please summarize:\n- How many clients are outliers?\n- What are the typical average readings among the data provided?\n- Which clients stand out the most?\n\nHere is the data:\n{{ $json.outlier_data }}",
        "options": {
          "systemMessage": "You are a helpful assistantYou are an experienced data analyst. Analyze the following list of clients and their energy readings for the past 3 months. Each entry contains client_id, client_name, average reading value, z_score, and a boolean indicating if they are an outlier."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        120,
        540
      ],
      "id": "b1888203-1dbc-4b0a-ba83-9f3421d027da",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "responseFormat": "text",
          "temperature": 0.4
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        120,
        780
      ],
      "id": "82b677c5-c802-4c7a-8280-9180f09bb51f",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "FAV61OrvVhaB3yQe",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const allClients = items.map(item => item.json);\n\nreturn [{\n  json: {\n    outlier_data: JSON.stringify(allClients, null, 2)\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -100,
        540
      ],
      "id": "f56ad138-9f13-43c6-b7f1-22b551f44a6a",
      "name": "Code1"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "upload-seed",
        "responseMode": "lastNode",
        "options": {
          "binaryPropertyName": "data"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -780,
        360
      ],
      "id": "777c7408-e0d8-4d0f-b45e-620662249402",
      "name": "Webhook1",
      "webhookId": "72a426b8-1656-4541-8ff3-fd5addad2566"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1.1,
      "position": [
        -540,
        360
      ],
      "id": "59c8cef2-d8e6-4e63-aebb-2f60607a7a82",
      "name": "Compression"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "clients",
          "mode": "list",
          "cachedResultName": "clients"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "nome",
              "displayName": "nome",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        580,
        60
      ],
      "id": "46a7395b-c0e0-41a3-9adb-2592374cbe00",
      "name": "Insert rows in a table",
      "credentials": {
        "postgres": {
          "id": "KPDQxduSSrlKy5C3",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "contracts",
          "mode": "list",
          "cachedResultName": "contracts"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {
            "active": false
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "client_id",
              "displayName": "client_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "active",
              "displayName": "active",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        580,
        220
      ],
      "id": "2351e9cb-8a8d-4a6e-9bb9-47094bc0fffc",
      "name": "Insert rows in a table1",
      "credentials": {
        "postgres": {
          "id": "KPDQxduSSrlKy5C3",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "$binary",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -300,
        360
      ],
      "id": "eb327f7d-cf00-40fe-835d-88f5a58d2f03",
      "name": "Split Out"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "428fda9a-f6d5-4d07-8e16-8641a00caea3",
              "leftValue": "={{$binary.file_2.fileName}}",
              "rightValue": "clientes.csv",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        60,
        80
      ],
      "id": "db2fe35c-986d-475f-86d7-ba6226cba526",
      "name": "If"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "428fda9a-f6d5-4d07-8e16-8641a00caea3",
              "leftValue": "={{$binary.file_1.fileName}}",
              "rightValue": "contratos.csv",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        60,
        240
      ],
      "id": "83e7352d-61e7-4938-a67a-e172a59d1cb9",
      "name": "If1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "428fda9a-f6d5-4d07-8e16-8641a00caea3",
              "leftValue": "={{$binary.file_0.fileName}}",
              "rightValue": "leituras.csv",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        60,
        400
      ],
      "id": "285c3b40-ef59-4bce-afc1-872958fb17bf",
      "name": "If2"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "energy_readings",
          "mode": "list",
          "cachedResultName": "energy_readings"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "contract_id",
              "displayName": "contract_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "reading_date",
              "displayName": "reading_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "reading_value",
              "displayName": "reading_value",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        580,
        380
      ],
      "id": "f785e5ea-18d0-4a8d-b251-a78ddc25368a",
      "name": "Insert rows in a table2",
      "credentials": {
        "postgres": {
          "id": "KPDQxduSSrlKy5C3",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "binaryPropertyName": "file_2",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        320,
        60
      ],
      "id": "c20dcc7e-e616-41c7-be14-21598ff70a96",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "binaryPropertyName": "file_1",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        320,
        220
      ],
      "id": "571500ad-68c4-431b-a6af-057c8b223ba5",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "binaryPropertyName": "file_0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        320,
        380
      ],
      "id": "76b4216d-7df7-4bf9-a30a-12ab825493a9",
      "name": "Extract from File2"
    }
  ],
  "pinData": {},
  "connections": {
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Compression",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compression": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          },
          {
            "node": "If1",
            "type": "main",
            "index": 0
          },
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Extract from File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Insert rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Insert rows in a table1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File2": {
      "main": [
        [
          {
            "node": "Insert rows in a table2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4b5909df-f493-4ac5-88a0-032cdf1bc41d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3e1f91cd61e4c14afa53112fa560ebcb9bdfc9cf0a72ca1834fb789295cd83ee"
  },
  "id": "7CwhzJszNgV3mTEp",
  "tags": []
}